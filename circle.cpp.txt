#include <GL/glut.h>
#include <cmath>

// Function to plot points for a circle, given the center (xc, yc)
void plotCirclePoints(int xc, int yc, int x, int y) {
    glBegin(GL_POINTS);
        glVertex2i(xc + x, yc + y);
        glVertex2i(xc - x, yc + y);
        glVertex2i(xc + x, yc - y);
        glVertex2i(xc - x, yc - y);
        glVertex2i(xc + y, yc + x);
        glVertex2i(xc - y, yc + x);
        glVertex2i(xc + y, yc - x);
        glVertex2i(xc - y, yc - x);
    glEnd();
}

// Bresenham's Circle Drawing Algorithm
void drawCircle(int xc, int yc, int radius) {
    int x = 0, y = radius;
    int d = 3 - 2 * radius;

    plotCirclePoints(xc, yc, x, y);
    
    while (y >= x) {
        x++;
        
        // Update decision parameter based on algorithm
        if (d > 0) {
            y--;
            d = d + 4 * (x - y) + 10;
        } else {
            d = d + 4 * x + 6;
        }

        plotCirclePoints(xc, yc, x, y);
    }
}

// Function to plot points for an ellipse, given the center (xc, yc)
void plotEllipsePoints(int xc, int yc, int x, int y) {
    glBegin(GL_POINTS);
        glVertex2i(xc + x, yc + y);
        glVertex2i(xc - x, yc + y);
        glVertex2i(xc + x, yc - y);
        glVertex2i(xc - x, yc - y);
    glEnd();
}

// Midpoint Ellipse Drawing Algorithm
void drawEllipse(int xc, int yc, int rx, int ry) {
    float dx, dy, d1, d2, x, y;
    x = 0;
    y = ry;

    // Initial decision parameter of region 1
    d1 = (ry * ry) - (rx * rx * ry) + (0.25 * rx * rx);
    dx = 2 * ry * ry * x;
    dy = 2 * rx * rx * y;

    // For region 1
    while (dx < dy) {
        plotEllipsePoints(xc, yc, x, y);
        
        if (d1 < 0) {
            x++;
            dx = dx + (2 * ry * ry);
            d1 = d1 + dx + (ry * ry);
        } else {
            x++;
            y--;
            dx = dx + (2 * ry * ry);
            dy = dy - (2 * rx * rx);
            d1 = d1 + dx - dy + (ry * ry);
        }
    }

    // Decision parameter of region 2
    d2 = ((ry * ry) * ((x + 0.5) * (x + 0.5))) + ((rx * rx) * ((y - 1) * (y - 1))) - (rx * rx * ry * ry);

    // For region 2
    while (y >= 0) {
        plotEllipsePoints(xc, yc, x, y);
        
        if (d2 > 0) {
            y--;
            dy = dy - (2 * rx * rx);
            d2 = d2 + (rx * rx) - dy;
        } else {
            y--;
            x++;
            dx = dx + (2 * ry * ry);
            dy = dy - (2 * rx * rx);
            d2 = d2 + dx - dy + (rx * rx);
        }
    }
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT);

    // Draw a circle at the center with radius 100
    drawCircle(0, 0, 100);

    // Draw an ellipse at the center with radii 150 and 100
    drawEllipse(200, 0, 150, 100);

    glFlush();
}

void init() {
    // Set the background color to black
    glClearColor(0.0, 0.0, 0.0, 1.0);

    // Set the color of the points to white
    glColor3f(1.0, 1.0, 1.0);

    // Set up the orthographic projection
    gluOrtho2D(-400, 400, -300, 300);
}

int main(int argc, char** argv) {
    // Initialize GLUT
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(800, 600);
    glutCreateWindow("Circle and Ellipse Drawing Algorithms");

    init();

    // Set up the display function
    glutDisplayFunc(display);

    // Start the GLUT main loop
    glutMainLoop();

    return 0;
}
