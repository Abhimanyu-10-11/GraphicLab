#include <GL/glut.h>
#include <cmath>

// Number of sides for the hexagon
const int numSides = 6;

// Hexagon radius
float radius = 0.5f;

void drawHexagon() {
    // Draw a hexagon using GL_LINE_LOOP
    glBegin(GL_LINE_LOOP);
    for (int i = 0; i < numSides; ++i) {
        float angle = 2.0f * M_PI * i / numSides;
        glVertex2f(radius * cos(angle), radius * sin(angle));
    }
    glEnd();
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT);

    // Set the color of the hexagon (e.g., white)
    glColor3f(1.0f, 1.0f, 1.0f);

    // Draw the hexagon
    drawHexagon();

    glFlush();
}

void reshape(int w, int h) {
    // Prevent division by zero
    if (h == 0) h = 1;

    // Set the viewport to the entire window
    glViewport(0, 0, w, h);

    // Calculate the aspect ratio of the window
    float aspectRatio = (float)w / (float)h;

    // Set up the projection matrix
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();

    // Adjust the coordinate system based on the aspect ratio
    if (aspectRatio >= 1.0f) {
        // Wider window
        gluOrtho2D(-aspectRatio, aspectRatio, -1.0, 1.0);
    } else {
        // Taller window
        gluOrtho2D(-1.0, 1.0, -1.0 / aspectRatio, 1.0 / aspectRatio);
    }

    // Switch back to modelview matrix
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
}

int main(int argc, char** argv) {
    // Initialize GLUT
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(600, 600);
    glutCreateWindow("Hexagon Reshape Example");

    // Set background color to black
    glClearColor(0.0f, 0.0f, 0.0f, 1.0f);

    // Set up the display, reshape, and main loop
    glutDisplayFunc(display);
    glutReshapeFunc(reshape);
    glutMainLoop();

    return 0;
}
