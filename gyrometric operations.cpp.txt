#include <GL/glut.h>
#include <cmath>

// Initial parameters for the square (size, position, rotation)
float squareSize = 0.2f;
float posX = 0.0f, posY = 0.0f;
float angle = 0.0f;

void drawSquare() {
    // Draw a square centered at (posX, posY) with size squareSize and rotated by angle
    glPushMatrix();
    
    // Apply transformations
    glTranslatef(posX, posY, 0.0f);
    glRotatef(angle, 0.0f, 0.0f, 1.0f);
    glScalef(squareSize, squareSize, 1.0f);

    // Draw the square
    glBegin(GL_POLYGON);
        glVertex2f(-0.5f, -0.5f);
        glVertex2f(0.5f, -0.5f);
        glVertex2f(0.5f, 0.5f);
        glVertex2f(-0.5f, 0.5f);
    glEnd();

    glPopMatrix();
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT);

    // Set the color of the object (e.g., white)
    glColor3f(1.0f, 1.0f, 1.0f);

    // Draw the square
    drawSquare();

    glFlush();
}

void reshape(int w, int h) {
    glViewport(0, 0, w, h);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();

    // Set the aspect ratio to maintain the square's shape
    if (w <= h)
        gluOrtho2D(-1.0f, 1.0f, -1.0f * (float)h / (float)w, 1.0f * (float)h / (float)w);
    else
        gluOrtho2D(-1.0f * (float)w / (float)h, 1.0f * (float)w / (float)h, -1.0f, 1.0f);

    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
}

void keyboard(unsigned char key, int x, int y) {
    switch (key) {
        // Translate the square
        case 'w': posY += 0.1f; break;  // Move up
        case 's': posY -= 0.1f; break;  // Move down
        case 'a': posX -= 0.1f; break;  // Move left
        case 'd': posX += 0.1f; break;  // Move right

        // Rotate the square
        case 'r': angle += 5.0f; break;  // Rotate clockwise
        case 'R': angle -= 5.0f; break;  // Rotate counterclockwise

        // Resize the square
        case '+': squareSize += 0.1f; break;  // Increase size
        case '-': squareSize -= 0.1f; break;  // Decrease size

        // Exit the program
        case 27: exit(0);  // Escape key to exit
    }

    // Request to redraw the window
    glutPostRedisplay();
}

int main(int argc, char** argv) {
    // Initialize GLUT
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(600, 600);
    glutCreateWindow("2D Geometric Operations");

    // Set the background color to black
    glClearColor(0.0f, 0.0f, 0.0f, 1.0f);

    // Set up the display and reshape functions
    glutDisplayFunc(display);
    glutReshapeFunc(reshape);

    // Handle keyboard input for transformations
    glutKeyboardFunc(keyboard);

    // Start the GLUT main loop
    glutMainLoop();

    return 0;
}
